//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ezvax.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class Users
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Users()
        {
            this.Comentariu = new HashSet<Comentariu>();
            this.Postare = new HashSet<Postare>();
            this.ProfilMedical = new HashSet<ProfilMedical>();
            this.Programare = new HashSet<Programare>();
        }

        public int id { get; set; }
        [Required(ErrorMessage = "Acest camp este necesar")]
        [DisplayName("Nume")]
        public string nume { get; set; }
        [Required(ErrorMessage = "Acest camp este necesar")]
        [DisplayName("Prenume")]
        public string prenume { get; set; }
        [Required(ErrorMessage = "Acest camp este necesar")]
        public string CNP { get; set; }
        [DataType(DataType.EmailAddress)]
        [DisplayName("Email")]
        public string email { get; set; }
        [Required(ErrorMessage = "Acest camp este necesar")]
        [DisplayName("Numar de telefon")]
        [DataType(DataType.PhoneNumber)]
        public string numarTelefon { get; set; }
        [Required(ErrorMessage = "Acest camp este necesar")]
        [DataType(DataType.Password)]
        [DisplayName("Parola")]
        public string password { get; set; }
        public string cnpErrorMessage { get; set; }
        public string telErrorMessage { get; set; }
        public string passErrorMessage { get; set; }
        public string LoginErrorMessage { get; set; }
        [Required(ErrorMessage = "This field is required")]
        [DataType(DataType.Password)]
        [DisplayName("Confirmare parola")]
        [Compare("password")]
        public string confirmPassword { get; set; }
        public bool ValidareCNP()
        {
            char[] array = this.CNP.ToCharArray();



            for (int i = 0; i < array.Length; i++)
            {
                if (Convert.ToInt32(array[i]) < 0 && Convert.ToInt32(array[i]) > 9)
                {
                    return false;
                }

            }

            if (!(array[0] == '1' || array[0] == '2' || array[0] == '5' || array[0] == '6'))
            {

                return false;
            }

            if (array.Length != 13)
            {

                return false;
            }
            if ((Convert.ToInt32(array[3]) - 48) * 10 + (Convert.ToInt32(array[4]) - 48) == 0 || (Convert.ToInt32(array[3]) - 48) * 10 + (Convert.ToInt32(array[4]) - 48) > 12)
            {

                Console.WriteLine(Convert.ToInt32(array[3]) - 48);
                Console.WriteLine(Convert.ToInt32(array[4]) - 48);
                return false;
            }
            if ((Convert.ToInt32(array[5]) - 48) * 10 + (Convert.ToInt32(array[6]) - 48) == 0 && ((Convert.ToInt32(array[5]) - 48) * 10 + (Convert.ToInt32(array[6]) - 48)) > 31)
            {
                return false;
            }
            if ((Convert.ToInt32(array[7]) - 48) * 10 + (Convert.ToInt32(array[8]) - 48) == 0 && ((Convert.ToInt32(array[7]) - 48) * 10 + (Convert.ToInt32(array[8]) - 48)) > 51)
            {
                return false;
            }
            Console.WriteLine(Convert.ToInt32(array[3]) - 48);
            Console.WriteLine(Convert.ToInt32(array[4]) - 48);
            return true;

        }
        public bool ValidarePass()
        {
            char[] array = this.password.ToCharArray();

            bool maxLength = false;
            bool hasUpperCase = false;
            bool hasNumber = false;

            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] <= 'Z' && array[i] >= 'A')
                    hasUpperCase = true;
                if (array[i] <= '9' && array[i] >= '1')
                    hasNumber = true;
            }
            if (array.Length >= 8)
            {
                maxLength = true;
            }
            if (hasNumber && hasUpperCase && maxLength)
                return true;
            else return false;
        }


        public bool ValidareTel()
        {
            char[] array = this.numarTelefon.ToCharArray();

            for (int i = 0; i < array.Length; i++)
            {
                if (Convert.ToInt32(array[i]) < 0 && Convert.ToInt32(array[i]) > 9)
                {
                    return false;
                }
            }
            if (array[0] != '0')
                return false;

            if (array[1] != '2' && array[1] != '3' && array[1] != '7')
                return false;

            if (array.Length != 10)
            {

                return false;
            }
            return true;

        }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Comentariu> Comentariu { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Postare> Postare { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProfilMedical> ProfilMedical { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Programare> Programare { get; set; }
    }
}
